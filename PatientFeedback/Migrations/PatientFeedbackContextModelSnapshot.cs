// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatientFeedback;

#nullable disable

namespace PatientFeedback.Migrations
{
    [DbContext(typeof(PatientFeedbackContext))]
    partial class PatientFeedbackContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2aac1a7d-b331-4f0a-b45c-4d7733c26708"),
                            AddressType = "home",
                            PatientId = new Guid("84e5cef0-2aed-4a9a-98bf-f00197713e73"),
                            StreetAddress = "2222 Home Street"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64f1b5a0-1f6e-4e59-ae95-a94b34e5619c"),
                            AppointmentType = "Endocrinologist visit",
                            DoctorId = new Guid("7bc1dbb0-0f8f-4594-92c7-2d7a49bc49f3"),
                            End = new DateTime(2023, 10, 7, 10, 14, 30, 97, DateTimeKind.Utc).AddTicks(4460),
                            PatientId = new Guid("84e5cef0-2aed-4a9a-98bf-f00197713e73"),
                            Start = new DateTime(2023, 10, 7, 8, 14, 30, 97, DateTimeKind.Utc).AddTicks(4460),
                            Status = "finished"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9858a67b-02f6-4f1a-9f28-39ddae2367f9"),
                            AppointmentId = new Guid("64f1b5a0-1f6e-4e59-ae95-a94b34e5619c")
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedbackQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentFeedbackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeedbackAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedbackQuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentFeedbackId");

                    b.HasIndex("FeedbackAnswerId");

                    b.HasIndex("FeedbackQuestionId");

                    b.ToTable("AppointmentFeedbackQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d2a381f-ead5-4de2-b6a1-faf83996dc46"),
                            AppointmentFeedbackId = new Guid("9858a67b-02f6-4f1a-9f28-39ddae2367f9"),
                            FeedbackQuestionId = new Guid("c0fb9d23-c54b-403d-8688-7ee4bfeb6a4d"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("40c67ccb-faec-471c-aff0-8d6f9f124c33"),
                            AppointmentFeedbackId = new Guid("9858a67b-02f6-4f1a-9f28-39ddae2367f9"),
                            FeedbackQuestionId = new Guid("a826ba92-a322-4b47-96e5-ec37e6a1e2ea"),
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("7c6f4459-6165-42cd-8694-7bc740795474"),
                            AppointmentFeedbackId = new Guid("9858a67b-02f6-4f1a-9f28-39ddae2367f9"),
                            FeedbackQuestionId = new Guid("9ac4728d-b4b6-454c-8cf4-13cbe1b657c6"),
                            Order = 3
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Codings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe388979-5dbc-4316-99ed-2bd4318588b6"),
                            Code = "E10-E14.9",
                            DiagnosisId = new Guid("1b3e3f11-fee1-4dc0-ae61-5cf964ec3b1d"),
                            Name = "Diabetes without complications",
                            System = "http://hl7.org/fhir/sid/icd-10"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContactSystem")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b831fab-e01c-43f3-9b18-d350ff4a79fe"),
                            ContactSystem = 1,
                            ContactType = 1,
                            PatientId = new Guid("84e5cef0-2aed-4a9a-98bf-f00197713e73"),
                            Value = "tendo@tendoco.com"
                        },
                        new
                        {
                            Id = new Guid("439086b8-da4c-49cd-b1a9-3f8b96b297fc"),
                            ContactSystem = 0,
                            ContactType = 0,
                            PatientId = new Guid("84e5cef0-2aed-4a9a-98bf-f00197713e73"),
                            Value = "555-555-2021"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b3e3f11-fee1-4dc0-ae61-5cf964ec3b1d"),
                            AppointmentId = new Guid("64f1b5a0-1f6e-4e59-ae95-a94b34e5619c"),
                            LastUpdated = new DateTime(2023, 10, 7, 8, 14, 30, 97, DateTimeKind.Utc).AddTicks(4540),
                            Status = "Final"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bc1dbb0-0f8f-4594-92c7-2d7a49bc49f3"),
                            FamilyName = "Careful",
                            GivenName = "Adam"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.FeedbackAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackAnswers");
                });

            modelBuilder.Entity("PatientFeedback.Entities.FeedbackQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0fb9d23-c54b-403d-8688-7ee4bfeb6a4d"),
                            QuestionType = 1,
                            Text = "Hi [patient_first_name], on a scale of 1-10, would you recommend Dr [doctor_last_name] to a friend or family member? 1 = Would not recommend, 10 = Would strongly recommend"
                        },
                        new
                        {
                            Id = new Guid("a826ba92-a322-4b47-96e5-ec37e6a1e2ea"),
                            QuestionType = 0,
                            Text = "Thank you. You were diagnosed with [diagnosis]. Did Dr [doctor_last_name] explain how to manage this diagnosis in a way you could understand?"
                        },
                        new
                        {
                            Id = new Guid("9ac4728d-b4b6-454c-8cf4-13cbe1b657c6"),
                            QuestionType = 2,
                            Text = "We appreciate the feedback, one last question: how do you feel about being diagnosed with [diagnosis]?"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84e5cef0-2aed-4a9a-98bf-f00197713e73"),
                            Active = true,
                            BirthDate = new DateTime(1998, 10, 7, 8, 14, 30, 97, DateTimeKind.Utc).AddTicks(4380),
                            FamilyName = "Tenderson",
                            Gender = "Male",
                            GivenName = "Tendo"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientFeedback.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Appointment", "Appointment")
                        .WithOne("AppointmentFeedback")
                        .HasForeignKey("PatientFeedback.Entities.AppointmentFeedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedbackQuestion", b =>
                {
                    b.HasOne("PatientFeedback.Entities.AppointmentFeedback", "AppointmentFeedback")
                        .WithMany("AppointmentFeedbackQuestions")
                        .HasForeignKey("AppointmentFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientFeedback.Entities.FeedbackAnswer", "FeedbackAnswer")
                        .WithMany()
                        .HasForeignKey("FeedbackAnswerId");

                    b.HasOne("PatientFeedback.Entities.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentFeedback");

                    b.Navigation("FeedbackAnswer");

                    b.Navigation("FeedbackQuestion");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Diagnosis", null)
                        .WithMany("Codings")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Appointment", "Appointment")
                        .WithMany("Diagnoses")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentFeedback");

                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.Navigation("AppointmentFeedbackQuestions");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Navigation("Codings");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
