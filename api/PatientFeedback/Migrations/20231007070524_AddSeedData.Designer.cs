// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatientFeedback;

#nullable disable

namespace PatientFeedback.Migrations
{
    [DbContext(typeof(PatientFeedbackContext))]
    [Migration("20231007070524_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5386c348-7c73-4186-9dc6-108bd586bbd8"),
                            AddressType = "home",
                            PatientId = new Guid("ab90917a-8668-4286-bf97-65cd56891a93"),
                            StreetAddress = "2222 Home Street"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f361cda8-15bf-462e-959b-759960f4fc78"),
                            AppointmentType = "Endocrinologist visit",
                            DoctorId = new Guid("d7152498-94cb-4a09-bd8d-0a133e61a015"),
                            End = new DateTime(2023, 10, 7, 9, 5, 23, 982, DateTimeKind.Utc).AddTicks(6270),
                            PatientId = new Guid("ab90917a-8668-4286-bf97-65cd56891a93"),
                            Start = new DateTime(2023, 10, 7, 7, 5, 23, 982, DateTimeKind.Utc).AddTicks(6260),
                            Status = "finished"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Codings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37cffebc-cde2-48b0-a9a5-115c62c115fb"),
                            Code = "E10-E14.9",
                            DiagnosisId = new Guid("8238c523-aacd-436d-8129-4cf478c5d530"),
                            Name = "Diabetes without complications",
                            System = "http://hl7.org/fhir/sid/icd-10"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContactSystem")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0998557-7a85-44a8-ba5b-73b9c00950f7"),
                            ContactSystem = 1,
                            ContactType = 1,
                            PatientId = new Guid("ab90917a-8668-4286-bf97-65cd56891a93"),
                            Value = "tendo@tendoco.com"
                        },
                        new
                        {
                            Id = new Guid("f0b6120e-aa97-45b8-bc6d-96e5c78cff05"),
                            ContactSystem = 0,
                            ContactType = 0,
                            PatientId = new Guid("ab90917a-8668-4286-bf97-65cd56891a93"),
                            Value = "555-555-2021"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8238c523-aacd-436d-8129-4cf478c5d530"),
                            AppointmentId = new Guid("f361cda8-15bf-462e-959b-759960f4fc78"),
                            LastUpdated = new DateTime(2023, 10, 7, 7, 5, 23, 982, DateTimeKind.Utc).AddTicks(6300),
                            Status = "Final"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7152498-94cb-4a09-bd8d-0a133e61a015"),
                            FamilyName = "Careful",
                            GivenName = "Adam"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab90917a-8668-4286-bf97-65cd56891a93"),
                            Active = true,
                            BirthDate = new DateTime(1998, 10, 7, 7, 5, 23, 982, DateTimeKind.Utc).AddTicks(6100),
                            FamilyName = "Tenderson",
                            Gender = "Male",
                            GivenName = "Tendo"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientFeedback.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Diagnosis", null)
                        .WithMany("Codings")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Appointment", "Appointment")
                        .WithMany("Diagnoses")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Navigation("Codings");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
