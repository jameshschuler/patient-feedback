// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatientFeedback;

#nullable disable

namespace PatientFeedback.Migrations
{
    [DbContext(typeof(PatientFeedbackContext))]
    [Migration("20231010055952_AddAdditionalSeedDataV2")]
    partial class AddAdditionalSeedDataV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb047a9c-145a-4620-b585-33219d350d44"),
                            AddressType = "home",
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            StreetAddress = "2222 Home Street"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d385736e-3aee-415b-99ca-497f9cc095c3"),
                            AppointmentType = "Endocrinologist visit",
                            DoctorId = new Guid("0296f234-2103-4335-a88d-9afe08ddcf1c"),
                            End = new DateTime(2023, 10, 10, 7, 59, 52, 466, DateTimeKind.Utc).AddTicks(1940),
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Start = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(1940),
                            Status = "finished"
                        },
                        new
                        {
                            Id = new Guid("fd85b9ce-94e8-4852-95ca-c2939e1ea15c"),
                            AppointmentType = "Endocrinologist visit",
                            DoctorId = new Guid("0296f234-2103-4335-a88d-9afe08ddcf1c"),
                            End = new DateTime(2023, 10, 10, 7, 59, 52, 466, DateTimeKind.Utc).AddTicks(1950),
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Start = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(1950),
                            Status = "finished"
                        },
                        new
                        {
                            Id = new Guid("fa4b52bf-21c8-45d3-9527-f556dd0d5dab"),
                            AppointmentType = "Endocrinologist visit",
                            DoctorId = new Guid("0296f234-2103-4335-a88d-9afe08ddcf1c"),
                            End = new DateTime(2023, 10, 10, 7, 59, 52, 466, DateTimeKind.Utc).AddTicks(1950),
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Start = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(1950),
                            Status = "finished"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a648b400-4f7a-4a99-bbc7-5fe218d02768"),
                            AppointmentId = new Guid("d385736e-3aee-415b-99ca-497f9cc095c3")
                        },
                        new
                        {
                            Id = new Guid("50176c20-51b2-4a1c-93c9-58490260ee7c"),
                            AppointmentId = new Guid("fd85b9ce-94e8-4852-95ca-c2939e1ea15c")
                        },
                        new
                        {
                            Id = new Guid("557c6414-9e81-42fa-9121-c7f8579f9ba4"),
                            AppointmentId = new Guid("fa4b52bf-21c8-45d3-9527-f556dd0d5dab")
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedbackQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentFeedbackId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeedbackAnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedbackQuestionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentFeedbackId");

                    b.HasIndex("FeedbackAnswerId");

                    b.HasIndex("FeedbackQuestionId");

                    b.ToTable("AppointmentFeedbackQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("187e153d-ce7c-4870-9a28-60d6476a3739"),
                            AppointmentFeedbackId = new Guid("a648b400-4f7a-4a99-bbc7-5fe218d02768"),
                            FeedbackQuestionId = new Guid("bf858fd2-96ec-4de4-8b68-9ec60a5eb444"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("b312d5a0-b7ee-4aa6-b540-ca82e935ae0e"),
                            AppointmentFeedbackId = new Guid("a648b400-4f7a-4a99-bbc7-5fe218d02768"),
                            FeedbackQuestionId = new Guid("69bed495-4d57-4351-9928-36d5a4593baa"),
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("4046fe14-b22e-48e0-95cc-09b95dc73eaa"),
                            AppointmentFeedbackId = new Guid("a648b400-4f7a-4a99-bbc7-5fe218d02768"),
                            FeedbackQuestionId = new Guid("cc5ce509-e9fc-4431-b3fc-cdecff341ebe"),
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("0540be5e-813e-4e39-81a0-5b8438e058e5"),
                            AppointmentFeedbackId = new Guid("50176c20-51b2-4a1c-93c9-58490260ee7c"),
                            FeedbackQuestionId = new Guid("bf858fd2-96ec-4de4-8b68-9ec60a5eb444"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("85636ca4-2982-4169-a06b-309328bf58eb"),
                            AppointmentFeedbackId = new Guid("50176c20-51b2-4a1c-93c9-58490260ee7c"),
                            FeedbackQuestionId = new Guid("69bed495-4d57-4351-9928-36d5a4593baa"),
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("0d7d6b95-7516-489e-a2e8-3ff680d9c6d5"),
                            AppointmentFeedbackId = new Guid("557c6414-9e81-42fa-9121-c7f8579f9ba4"),
                            FeedbackQuestionId = new Guid("cc5ce509-e9fc-4431-b3fc-cdecff341ebe"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("8072f4b7-9ea1-4b17-b3a7-5153bac1174d"),
                            AppointmentFeedbackId = new Guid("557c6414-9e81-42fa-9121-c7f8579f9ba4"),
                            FeedbackQuestionId = new Guid("69bed495-4d57-4351-9928-36d5a4593baa"),
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("98eb6791-620d-47b1-9532-5aeb62e98ff4"),
                            AppointmentFeedbackId = new Guid("557c6414-9e81-42fa-9121-c7f8579f9ba4"),
                            FeedbackQuestionId = new Guid("bf858fd2-96ec-4de4-8b68-9ec60a5eb444"),
                            Order = 3
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("Codings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3eb3eb6c-78d2-4030-a7ae-72350285a289"),
                            Code = "E10-E14.9",
                            DiagnosisId = new Guid("ae780c06-7554-4311-a0e5-6641a373fd44"),
                            Name = "Diabetes without complications",
                            System = "http://hl7.org/fhir/sid/icd-10"
                        },
                        new
                        {
                            Id = new Guid("a56a8874-02dc-412b-bcbf-670ca70a4337"),
                            Code = "E10-E14.9",
                            DiagnosisId = new Guid("122d69de-1406-42e9-95be-f9a7d1b60719"),
                            Name = "Diabetes without complications",
                            System = "http://hl7.org/fhir/sid/icd-10"
                        },
                        new
                        {
                            Id = new Guid("20aea0a0-2777-4f24-b97d-8d8d98ae9b38"),
                            Code = "E10-E14.9",
                            DiagnosisId = new Guid("e02a180c-d447-471d-ab0a-d93eb4e47c79"),
                            Name = "Diabetes without complications",
                            System = "http://hl7.org/fhir/sid/icd-10"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContactSystem")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00515cfa-c012-4d40-87b0-75727e34630f"),
                            ContactSystem = 1,
                            ContactType = 1,
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Value = "tendo@tendoco.com"
                        },
                        new
                        {
                            Id = new Guid("5c24df65-006e-4370-b2c4-d8240816fcea"),
                            ContactSystem = 0,
                            ContactType = 0,
                            PatientId = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Value = "555-555-2021"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Diagnoses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae780c06-7554-4311-a0e5-6641a373fd44"),
                            AppointmentId = new Guid("d385736e-3aee-415b-99ca-497f9cc095c3"),
                            LastUpdated = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(2110),
                            Status = "Final"
                        },
                        new
                        {
                            Id = new Guid("122d69de-1406-42e9-95be-f9a7d1b60719"),
                            AppointmentId = new Guid("fd85b9ce-94e8-4852-95ca-c2939e1ea15c"),
                            LastUpdated = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(2110),
                            Status = "Final"
                        },
                        new
                        {
                            Id = new Guid("e02a180c-d447-471d-ab0a-d93eb4e47c79"),
                            AppointmentId = new Guid("fa4b52bf-21c8-45d3-9527-f556dd0d5dab"),
                            LastUpdated = new DateTime(2023, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(2120),
                            Status = "Final"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0296f234-2103-4335-a88d-9afe08ddcf1c"),
                            FamilyName = "Careful",
                            GivenName = "Adam"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.FeedbackAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackAnswers");
                });

            modelBuilder.Entity("PatientFeedback.Entities.FeedbackQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf858fd2-96ec-4de4-8b68-9ec60a5eb444"),
                            QuestionName = "DoctorRecommendRating",
                            QuestionType = 1,
                            Text = "Hi {patient_first_name}, on a scale of 1-10, would you recommend Dr. {doctor_last_name} to a friend or family member? 1 = Would not recommend, 10 = Would strongly recommend"
                        },
                        new
                        {
                            Id = new Guid("69bed495-4d57-4351-9928-36d5a4593baa"),
                            QuestionName = "HelpfulDiagnosisExplanation",
                            QuestionType = 0,
                            Text = "Thank you. You were diagnosed with {diagnosis}. Did Dr. {doctor_last_name} explain how to manage this diagnosis in a way you could understand?"
                        },
                        new
                        {
                            Id = new Guid("cc5ce509-e9fc-4431-b3fc-cdecff341ebe"),
                            QuestionName = "DiagnosisReflection",
                            QuestionType = 2,
                            Text = "We appreciate the feedback, one last question: how do you feel about being diagnosed with {diagnosis}?"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98ca4b72-dd7b-4bb1-9e25-4d13805dcd30"),
                            Active = true,
                            BirthDate = new DateTime(1998, 10, 10, 5, 59, 52, 466, DateTimeKind.Utc).AddTicks(1850),
                            FamilyName = "Tenderson",
                            Gender = "Male",
                            GivenName = "Tendo"
                        });
                });

            modelBuilder.Entity("PatientFeedback.Entities.Address", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientFeedback.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Appointment", "Appointment")
                        .WithOne("AppointmentFeedback")
                        .HasForeignKey("PatientFeedback.Entities.AppointmentFeedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedbackQuestion", b =>
                {
                    b.HasOne("PatientFeedback.Entities.AppointmentFeedback", "AppointmentFeedback")
                        .WithMany("AppointmentFeedbackQuestions")
                        .HasForeignKey("AppointmentFeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PatientFeedback.Entities.FeedbackAnswer", "FeedbackAnswer")
                        .WithMany()
                        .HasForeignKey("FeedbackAnswerId");

                    b.HasOne("PatientFeedback.Entities.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentFeedback");

                    b.Navigation("FeedbackAnswer");

                    b.Navigation("FeedbackQuestion");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Coding", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Diagnosis", null)
                        .WithMany("Codings")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Contact", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Patient", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.HasOne("PatientFeedback.Entities.Appointment", "Appointment")
                        .WithMany("Diagnoses")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Appointment", b =>
                {
                    b.Navigation("AppointmentFeedback")
                        .IsRequired();

                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("PatientFeedback.Entities.AppointmentFeedback", b =>
                {
                    b.Navigation("AppointmentFeedbackQuestions");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Diagnosis", b =>
                {
                    b.Navigation("Codings");
                });

            modelBuilder.Entity("PatientFeedback.Entities.Patient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Appointments");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
